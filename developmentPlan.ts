import { DevPlanData } from './types';

export const developmentPlanData: DevPlanData = {
  "completed": [
    "Initial setup: React, Tailwind, Gemini SDK.",
    "Core image generation loop (theme -> prompt -> image -> next theme).",
    "Image display and basic controls (start/stop, theme input).",
    "Image history panel (localStorage persistence).",
    "Predefined and user-saved concepts.",
    "Concept remixing feature.",
    "Fullscreen image viewer with controls.",
    "Download image and copy prompt functionality.",
    "UI enhancements: drawers for controls and history, blur/transparency.",
    "Google Drive integration: Sign-in/out, image upload to a dedicated folder.",
    "Advanced Settings Modal: Logging, Dev Plan, Troubleshooting sections.",
    "Comprehensive application logging system.",
    "Application Renaming to 'Etherscapes'.",
    "Art Style Selection Feature: Allowing users to choose an art style to influence image generation.",
    "Multi-provider image generation support (selection & API key management).",
    "Dynamic model selection based on chosen provider.",
    "Intelligent failover system for image providers during generation.",
    "User-configurable API keys for third-party image providers (stored in browser's local storage).",
    "Simplified confirmation for setting default image provider and model.",
    "Refined Stability AI integration to support both Stable Image API (e.g., SD3 Medium) and older v1 engine APIs.",
    "Downloadable application logs from Advanced Settings.",
    "Dynamic Model Control (Negative Prompt input).",
    "Prompt Engineer Assistant (AI-powered theme enhancement).",
    "Direct URL Handling for image generation services and downloads.",
    "Presets System (save/load full configurations including concept, art style, provider, model, negative prompt).",
    "Refining Google Drive error handling and user feedback.",
    "Refactor: Extracted toast notification logic to `useToast.ts` custom hook (Phase 1).",
    "Refactor: Extracted application logging to `useLogger.ts` custom hook (Phase 1).",
    "Refactor: Extracted core image generation logic to `useImageGeneration.ts` custom hook (Phase 1).",
    "Refactor: Extracted Google Drive synchronization logic to `useDriveSync.ts` custom hook (Phase 1).",
    "Refactor: Extracted image history management to `useImageHistory.ts` custom hook (Phase 1).",
    "Refactor: Extract chat logic to `useChat.ts` custom hook (Phase 1).",
    "Interactive History: 'Branch from here' functionality.",
    "Interactive History (Compare Mode).",
    "Fal.ai Phase 1: Develop `useFalRealtime.ts` hook for WebSocket connections to Fal.ai real-time endpoints.",
    "Fal.ai Phase 1: Integrate `useFalRealtime` hook into `useImageGeneration` (used by `App.tsx`) for Fal.ai real-time image updates.",
    "Fal.ai Phase 1: Refactor Fal.ai image generation to use `useFalRealtime` hook within `useImageGeneration`, handling WebSocket logic and state updates for real-time.",
    "Fal.ai Phase 1: Add Fal.ai provider to `constants.ts` with real-time model configuration and update related generation logic.",
    "Update `types.ts` to include `fal_ai` in `ImageProviderId`.",
    "Fal.ai Advanced Integration (Major Focus - New Vision: 'Live Painting Canvas'): Phase 2: Redesign `ImageEditorDrawer.tsx` for Fal.ai Precision Studio UI (IP-Adapter, ControlNet, LLaVA).",
    "Fal.ai Advanced Integration (Major Focus - New Vision: 'Live Painting Canvas'): Phase 2: 'Precision Control Studio' with Advanced Fal.ai Tools: Create `services/falService.ts` with (simulated) API call functions for IP-Adapter, ControlNet, and LLaVA for Fal.ai.",
    "Fal.ai Advanced Integration (Major Focus - New Vision: 'Live Painting Canvas'): Phase 2: 'Precision Control Studio' with Advanced Fal.ai Tools: Integrate `falService.ts` calls into `ImageEditorDrawer.tsx` handlers for IP-Adapter, ControlNet, and LLaVA.",
    "Fal.ai Advanced Integration (Major Focus - New Vision: 'Live Painting Canvas'): Phase 3: 'Sensory Expansion' with Fal.ai Multimedia Models: Stable Video Diffusion (SVD) Integration: Add 'Animate this Image' functionality in `ImageHistory.tsx` and `FullscreenModal.tsx`.",
    "Fal.ai Advanced Integration (Major Focus - New Vision: 'Live Painting Canvas'): Phase 3: 'Sensory Expansion' with Fal.ai Multimedia Models: Stable Video Diffusion (SVD) Integration: Extend `services/falService.ts` for SVD API calls (simulated) using an image file as input, returning a mock video URL.",
    "Fal.ai Advanced Integration (Major Focus - New Vision: 'Live Painting Canvas'): Phase 3: 'Sensory Expansion' with Fal.ai Multimedia Models: Stable Video Diffusion (SVD) Integration: Integrate `generateVideoWithSVD` from `falService.ts` into `App.tsx`'s `handleAnimateWithSVD` function.",
    "Fal.ai Advanced Integration (Major Focus - New Vision: 'Live Painting Canvas'): Phase 3: 'Sensory Expansion' with Fal.ai Multimedia Models: Stable Video Diffusion (SVD) Integration: Implement a modal or component (`VideoDisplayModal.tsx`) to display generated videos (.mp4).",
    "Fal.ai Advanced Integration (Major Focus - New Vision: 'Live Painting Canvas'): Phase 3: 'Sensory Expansion' with Fal.ai Multimedia Models: Stable Video Diffusion (SVD) Integration: Add new states in `App.tsx` for SVD loading, video URL, and modal visibility (related to VideoDisplayModal).",
    "Fal.ai Advanced Integration (Major Focus - New Vision: 'Live Painting Canvas'): Phase 3: 'Sensory Expansion' with Fal.ai Multimedia Models: AudioGen Integration: Add 'Generate Soundscape' button/icon to image history items.",
    "Fal.ai Advanced Integration (Major Focus - New Vision: 'Live Painting Canvas'): Phase 3: 'Sensory Expansion' with Fal.ai Multimedia Models: AudioGen Integration: Create `services/audioService.ts` (or extend `falService.ts`) for AudioGen API calls using the image prompt as input for the soundscape.",
    "Fal.ai Advanced Integration (Major Focus - New Vision: 'Live Painting Canvas'): Phase 3: 'Sensory Expansion' with Fal.ai Multimedia Models: AudioGen Integration: Implement UI for audio playback and controls.",
    "UI Enhancement: Add media type tabs (All, Image, Video, Audio) to ImageHistory and ImageEditorDrawer.",
    "State Management Refactor: Implement a simulated centralized state management (using React Context) to mirror Jotai's benefits, reducing prop drilling and centralizing key application states.",
    "Activate Fal.ai Services (IP-Adapter, ControlNet, LLaVA, SVD): Update `services/falService.ts` to use actual `fetch` calls, `FormData`, and `Authorization` headers.",
    "Activate AudioGen Service: Update `services/audioService.ts` (for `generateSoundscapeWithFal`) to use actual `fetch` calls and `Authorization` headers.",
    "Activate Other Chat Providers (DeepSeek): Create `services/deepseekService.ts` and integrate it into `useChat.ts` for selectable chat functionality with DeepSeek.",
    "In-app Image Editing: Add In-painting tool using Clipdrop API.",
    "In-app Image Editing: Add Out-painting tools using provider APIs (e.g., Stability AI, Clipdrop).",
    "Deeper Google Drive Integration: Allow browsing and loading from user's 'Etherscape_Generated_Images' folder.",
    "UI/UX - Provider Icons: Display provider icons on history thumbnails and main image during load.",
    "UI/UX - Loading Skeletons: Implement skeleton loaders for smoother perceived performance, especially in history.",
    "UI/UX - Onboarding Tour: Create an interactive guide for new users explaining key features."
  ],
  "inProgress": [],
  "future": [
    // --- Phase 2: Improve User Experience and Add New Features (as per user plan) ---
    // --- Phase 3: Advanced Features and Integrated Ecosystem (as per user plan) ---
    "Community Gallery: Develop a platform for users to share creations (requires backend & auth).",
    "Image Caching: Implement client-side caching (Cache API/Service Worker) for faster history/image loading.",
    "User Data Export/Import: Allow backup/restore of concepts, presets, and history via JSON.",
    // --- Carry-over Future Items (from original plan) ---
    "User accounts/profiles (beyond Drive auth) for multi-device sync.",
    "Enhanced accessibility (WCAG compliance review)."
  ]
};